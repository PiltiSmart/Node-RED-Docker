[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "(sim)PiltiSmart-THAQ-Probe",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e8eb5aef210dfc58",
        "type": "tab",
        "label": "(sim)PiltiSmart-WL-Probe",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7e014090dd718f98",
        "type": "mqtt-broker",
        "name": "TH-Simulator-node-red",
        "broker": "mqtt-tb-sit.piltismart.org",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b3354e2896d1b58e",
        "type": "mqtt-broker",
        "name": "PiltiSmart-WL-Probe",
        "broker": "mqtt-tb-sit.piltismart.org",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "99389550b852e075",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "name": "Get TH Data",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.openweathermap.org/data/2.5/weather?lat=53.349899&lon=-6.269648&appid=a2f587cab8f72610e9e3bc4f3bbaa905&units=metric",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 150,
        "y": 280,
        "wires": [
            [
                "b56efe47ad8adcf5"
            ]
        ]
    },
    {
        "id": "b56efe47ad8adcf5",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "TH",
        "func": "let payload = msg.payload;  // Extract the payload from the message\n\n// Create a new object to store the extracted values\nlet out = {};\n\n// Check if the required fields are present\nif (payload.main) {\n    out.temperature = payload.main.temp;  // Extract the temperature\n    out.humidity = payload.main.humidity;  // Extract the humidity\n}\n\n// Set the new output in msg.payload\nmsg.payload = out;\n\n// Return the updated message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 260,
        "wires": [
            [
                "b0353a3e8ddaf930"
            ]
        ]
    },
    {
        "id": "b0353a3e8ddaf930",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "(Telemetry)TH-Simulator-node-red",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7e014090dd718f98",
        "x": 660,
        "y": 200,
        "wires": []
    },
    {
        "id": "fdaf310ac5f99f7d",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "name": "Get AQI Data",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.openweathermap.org/data/2.5/air_pollution?lat=53.349899&lon=-6.269648&appid=a2f587cab8f72610e9e3bc4f3bbaa905&units=metric",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 150,
        "y": 320,
        "wires": [
            [
                "e6e0dfb751c2d3a0"
            ]
        ]
    },
    {
        "id": "e6e0dfb751c2d3a0",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "AQI",
        "func": "// Extract the payload from the message\nlet payload = msg.payload;\n\n// Create an object to store the extracted values\nlet out = {};\n\n// Check if 'list' and 'main' fields exist in the payload\nif (payload.list && payload.list[0]) {\n    let airData = payload.list[0];  // Access the first element in the list\n\n    // Extract AQI from the 'main' section\n    out.aqi = airData.main.aqi;\n\n    // Extract all components from the 'components' section\n    if (airData.components) {\n        out.co = airData.components.co;\n        out.no = airData.components.no;\n        out.no2 = airData.components.no2;\n        out.o3 = airData.components.o3;\n        out.so2 = airData.components.so2;\n        out.pm2_5 = airData.components.pm2_5;\n        out.pm10 = airData.components.pm10;\n        out.nh3 = airData.components.nh3;\n    }\n}\n\n// Set the new output in msg.payload\nmsg.payload = out;\n\n// Return the updated message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 340,
        "wires": [
            [
                "b0353a3e8ddaf930"
            ]
        ]
    },
    {
        "id": "452afc3586cf64ce",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Battery Level",
        "func": "// Initialize battery level and state (on first run or retrieved from context)\nlet batteryLevel = context.get('batteryLevel');\nif (batteryLevel === undefined) {\n    batteryLevel = 0;  // Start at 0 on the first run\n}\n\nlet decreasing = context.get('decreasing');\nif (decreasing === undefined) {\n    decreasing = false;  // Start by charging if battery level is 0 initially\n}\n\n// Simulate charging status (true or false randomly)\nlet isCharging = Math.random() < 0.5;  // 50% chance of being in charging mode\n\n// Simulate the battery consumption and charging process\nif (decreasing) {\n    // Decrease battery level by a random value between 0 and 1\n    let randomDecrease = Math.random();  // Random decrease between 0 and 1\n    batteryLevel -= randomDecrease;\n\n    // Ensure battery level doesn't go below 0\n    if (batteryLevel <= 0) {\n        batteryLevel = 0;\n        decreasing = false;  // Switch to charging mode\n    }\n} else {\n    // During the charging phase, sometimes decreasing can also happen (30% chance)\n    let randomAction = Math.random(); // Generate a random number between 0 and 1\n    \n    if (randomAction < 0.3) {  // 30% chance to decrease during charging phase\n        let randomDecrease = Math.random();  // Random decrease between 0 and 1\n        batteryLevel -= randomDecrease;\n        \n        // Ensure battery level doesn't go below 0\n        if (batteryLevel < 0) {\n            batteryLevel = 0;\n        }\n    } else {\n        // Gradually charge the battery by a random value up to 3 units\n        let chargeIncrease = Math.random() * (3 - 1) + 1;  // Random increase between 1 and 3\n        batteryLevel = Math.min(100, batteryLevel + chargeIncrease);  // Ensure it doesn't go over 100\n    }\n}\n\n// Determine battery status based on the battery level\nlet out = {};\nif (batteryLevel < 20) {\n    out.batteryStatus = \"Low\";\n} else if (batteryLevel >= 20 && batteryLevel <= 99) {\n    out.batteryStatus = \"Normal\";\n} else {\n    out.batteryStatus = \"Full\";\n}\n\n// Create an output object to store the battery level, status, and charging state\nout.batteryLevel = batteryLevel.toFixed(2);  // Keep 2 decimal places\nout.batteryChargingStatus = isCharging ? \"Charging\" : \"Not charging\";  // Display \"Charging\" or \"Not charging\"\n\n// Save updated battery level and state to context\ncontext.set('batteryLevel', batteryLevel);\ncontext.set('decreasing', decreasing);\n\n// Output the current battery level, status, and charging state as JSON\nmsg.payload = out;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 360,
        "wires": [
            [
                "30c617eaaeec9294"
            ]
        ]
    },
    {
        "id": "30c617eaaeec9294",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "(Attributes)TH-Simulator-node-red",
        "topic": "v1/devices/me/attributes",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7e014090dd718f98",
        "x": 660,
        "y": 380,
        "wires": []
    },
    {
        "id": "7b8fd0d2ad4d73bc",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "format IP",
        "func": "// Get the result from the exec node which outputs the IP\nlet ipAddress = msg.payload.trim();  // Trim any extra spaces\n\n// Set the IP address in msg.payload\nmsg.payload = {\n    ipAddress: ipAddress\n};\n\n// Return the message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 420,
        "wires": [
            [
                "30c617eaaeec9294"
            ]
        ]
    },
    {
        "id": "2ab989d563a1fdb1",
        "type": "exec",
        "z": "f6f2187d.f17ca8",
        "command": "ifconfig eth0 | grep 'inet ' | awk '{print $2}'",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get IP",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "7b8fd0d2ad4d73bc"
            ],
            [],
            []
        ]
    },
    {
        "id": "f067313f017e4f35",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "(Attributes)TH-Simulator-node-red",
        "topic": "v1/devices/me/attributes",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "7e014090dd718f98",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 120,
        "wires": [
            [
                "e4efb105c930ab9d"
            ]
        ]
    },
    {
        "id": "64fc07eb7fc33556",
        "type": "trigger",
        "z": "f6f2187d.f17ca8",
        "name": "dataIntravelContoller",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-250",
        "extend": false,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 160,
        "y": 200,
        "wires": [
            [
                "99389550b852e075",
                "fdaf310ac5f99f7d",
                "452afc3586cf64ce",
                "2ab989d563a1fdb1"
            ]
        ]
    },
    {
        "id": "e4efb105c930ab9d",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "dataIntravelLimit",
        "func": "let out ={}\nif (msg.payload.dataIntravel < 10) \n{ msg.payload.dataIntravel = 10}\n\nout.delay = (msg.payload.dataIntravel)*1000\n\nreturn out;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 120,
        "wires": [
            [
                "64fc07eb7fc33556"
            ]
        ]
    },
    {
        "id": "f23feb49f7216711",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Restart Device",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "{\"dataIntravel\":31}",
        "payloadType": "json",
        "x": 180,
        "y": 60,
        "wires": [
            [
                "e4efb105c930ab9d"
            ]
        ]
    },
    {
        "id": "c9d1d5f735172628",
        "type": "mqtt out",
        "z": "e8eb5aef210dfc58",
        "name": "(Telemetry)WaterLevel-Probe",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b3354e2896d1b58e",
        "x": 580,
        "y": 340,
        "wires": []
    },
    {
        "id": "dd354c380b194489",
        "type": "function",
        "z": "e8eb5aef210dfc58",
        "name": "Battery Level",
        "func": "// Initialize battery level and state (on first run or retrieved from context)\nlet batteryLevel = context.get('batteryLevel');\nif (batteryLevel === undefined) {\n    batteryLevel = 0;  // Start at 0 on the first run\n}\n\nlet decreasing = context.get('decreasing');\nif (decreasing === undefined) {\n    decreasing = false;  // Start by charging if battery level is 0 initially\n}\n\n// Simulate charging status (true or false randomly)\nlet isCharging = Math.random() < 0.5;  // 50% chance of being in charging mode\n\n// Simulate the battery consumption and charging process\nif (decreasing) {\n    // Decrease battery level by a random value between 0 and 1\n    let randomDecrease = Math.random();  // Random decrease between 0 and 1\n    batteryLevel -= randomDecrease;\n\n    // Ensure battery level doesn't go below 0\n    if (batteryLevel <= 0) {\n        batteryLevel = 0;\n        decreasing = false;  // Switch to charging mode\n    }\n} else {\n    // During the charging phase, sometimes decreasing can also happen (30% chance)\n    let randomAction = Math.random(); // Generate a random number between 0 and 1\n    \n    if (randomAction < 0.3) {  // 30% chance to decrease during charging phase\n        let randomDecrease = Math.random();  // Random decrease between 0 and 1\n        batteryLevel -= randomDecrease;\n        \n        // Ensure battery level doesn't go below 0\n        if (batteryLevel < 0) {\n            batteryLevel = 0;\n        }\n    } else {\n        // Gradually charge the battery by a random value up to 3 units\n        let chargeIncrease = Math.random() * (3 - 1) + 1;  // Random increase between 1 and 3\n        batteryLevel = Math.min(100, batteryLevel + chargeIncrease);  // Ensure it doesn't go over 100\n    }\n}\n\n// Determine battery status based on the battery level\nlet out = {};\nif (batteryLevel < 20) {\n    out.batteryStatus = \"Low\";\n} else if (batteryLevel >= 20 && batteryLevel <= 99) {\n    out.batteryStatus = \"Normal\";\n} else {\n    out.batteryStatus = \"Full\";\n}\n\n// Create an output object to store the battery level, status, and charging state\nout.batteryLevel = batteryLevel.toFixed(2);  // Keep 2 decimal places\nout.batteryChargingStatus = isCharging ? \"Charging\" : \"Not charging\";  // Display \"Charging\" or \"Not charging\"\n\n// Save updated battery level and state to context\ncontext.set('batteryLevel', batteryLevel);\ncontext.set('decreasing', decreasing);\n\n// Output the current battery level, status, and charging state as JSON\nmsg.payload = out;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 280,
        "wires": [
            [
                "0ba9cd73dd874d6c"
            ]
        ]
    },
    {
        "id": "0ba9cd73dd874d6c",
        "type": "mqtt out",
        "z": "e8eb5aef210dfc58",
        "name": "(Attributes)WaterLevel-Probe",
        "topic": "v1/devices/me/attributes",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b3354e2896d1b58e",
        "x": 580,
        "y": 260,
        "wires": []
    },
    {
        "id": "0af029b219fcac36",
        "type": "function",
        "z": "e8eb5aef210dfc58",
        "name": "format IP",
        "func": "// Get the result from the exec node which outputs the IP\nlet ipAddress = msg.payload.trim();  // Trim any extra spaces\n\n// Set the IP address in msg.payload\nmsg.payload = {\n    ipAddress: ipAddress\n};\n\n// Return the message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 320,
        "wires": [
            [
                "0ba9cd73dd874d6c"
            ]
        ]
    },
    {
        "id": "d2386668794075b6",
        "type": "exec",
        "z": "e8eb5aef210dfc58",
        "command": "ifconfig eth0 | grep 'inet ' | awk '{print $2}'",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get IP",
        "x": 190,
        "y": 340,
        "wires": [
            [
                "0af029b219fcac36"
            ],
            [],
            []
        ]
    },
    {
        "id": "5cc410c371e7ea92",
        "type": "mqtt in",
        "z": "e8eb5aef210dfc58",
        "name": "(Attributes)WaterLevel-Probe",
        "topic": "v1/devices/me/attributes",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "b3354e2896d1b58e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 140,
        "wires": [
            [
                "978a77fe34a515f8"
            ]
        ]
    },
    {
        "id": "f0c0548ef4c220bc",
        "type": "trigger",
        "z": "e8eb5aef210dfc58",
        "name": "dataIntravelContoller",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-250",
        "extend": false,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 180,
        "y": 200,
        "wires": [
            [
                "dd354c380b194489",
                "d2386668794075b6",
                "water-level-function"
            ]
        ]
    },
    {
        "id": "978a77fe34a515f8",
        "type": "function",
        "z": "e8eb5aef210dfc58",
        "name": "dataIntravelLimit",
        "func": "let out ={}\nif (msg.payload.dataIntravel < 10) \n{ msg.payload.dataIntravel = 10}\n\nout.delay = (msg.payload.dataIntravel)*1000\n\nreturn out;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 120,
        "wires": [
            [
                "f0c0548ef4c220bc"
            ]
        ]
    },
    {
        "id": "water-level-function",
        "type": "function",
        "z": "e8eb5aef210dfc58",
        "name": "Simulate Water Level",
        "func": "// Initialize water level and state (on first run or retrieved from context)\nlet waterLevel = context.get('waterLevel');\nif (waterLevel === undefined) {\n    waterLevel = 0;  // Start at 0 on the first run\n}\n\nlet decreasing = context.get('decreasing');\nif (decreasing === undefined) {\n    decreasing = false;  // Start by refilling if water level is 0 initially\n}\n\n// Simulate the water consumption and refill process\nif (decreasing) {\n    // Decrease water level by a random value between 0 and 10\n    let randomDecrease = Math.floor(Math.random() * 11);  // 0 to 15 inclusive\n    waterLevel -= randomDecrease;\n\n    // Ensure water level doesn't go below 0\n    if (waterLevel <= 0) {\n        waterLevel = 0;\n        decreasing = false;  // Switch to refill mode\n    }\n} else {\n    // During the refill phase, sometimes decreasing can also happen (30% chance)\n    let randomAction = Math.random(); // Generate a random number between 0 and 1\n    \n    if (randomAction < 0.3) {  // 30% chance to decrease during refill phase\n        let randomDecrease = Math.floor(Math.random() * 16);  // 0 to 15 inclusive\n        waterLevel -= randomDecrease;\n        \n        // Ensure water level doesn't go below 0\n        if (waterLevel < 0) {\n            waterLevel = 0;\n        }\n    } else {\n        // Gradually refill the water by 5 units at a time\n        waterLevel += 20;\n        \n        // Ensure water level doesn't exceed 100\n        if (waterLevel >= 100) {\n            waterLevel = 100;\n            decreasing = true;  // Switch back to decreasing mode once full\n        }\n    }\n}\n\n// Save updated water level and state to context\ncontext.set('waterLevel', waterLevel);\ncontext.set('decreasing', decreasing);\n\n// Output the current water level as JSON\nmsg.payload = { \"Water_Level\": waterLevel };\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 400,
        "wires": [
            [
                "debug-water-level",
                "c9d1d5f735172628"
            ]
        ]
    },
    {
        "id": "debug-water-level",
        "type": "debug",
        "z": "e8eb5aef210dfc58",
        "name": "Water Level Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 550,
        "y": 420,
        "wires": []
    },
    {
        "id": "6fdfbafa4819e40b",
        "type": "inject",
        "z": "e8eb5aef210dfc58",
        "name": "Restart Device",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "{\"dataIntravel\":5}",
        "payloadType": "json",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "978a77fe34a515f8"
            ]
        ]
    }
]